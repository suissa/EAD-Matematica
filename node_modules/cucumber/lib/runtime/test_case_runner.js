'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _helpers = require('./helpers');

var _attachment_manager = require('./attachment_manager');

var _attachment_manager2 = _interopRequireDefault(_attachment_manager);

var _status = require('../status');

var _status2 = _interopRequireDefault(_status);

var _step_runner = require('./step_runner');

var _step_runner2 = _interopRequireDefault(_step_runner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TestCaseRunner = function () {
  function TestCaseRunner(_ref) {
    var _this = this;

    var eventBroadcaster = _ref.eventBroadcaster,
        skip = _ref.skip,
        testCase = _ref.testCase,
        supportCodeLibrary = _ref.supportCodeLibrary,
        worldParameters = _ref.worldParameters;
    (0, _classCallCheck3.default)(this, TestCaseRunner);

    var attachmentManager = new _attachment_manager2.default(function (_ref2) {
      var data = _ref2.data,
          media = _ref2.media;

      if (_this.testStepIndex > _this.maxTestStepIndex) {
        throw new Error('Cannot attach after all steps/hooks have finished running. Ensure your step/hook waits for the attach to finish.');
      }
      _this.emit('test-step-attachment', {
        index: _this.testStepIndex,
        data: data,
        media: media
      });
    });
    this.eventBroadcaster = eventBroadcaster;
    this.skip = skip;
    this.testCase = testCase;
    this.supportCodeLibrary = supportCodeLibrary;
    this.world = new supportCodeLibrary.World({
      attach: attachmentManager.create.bind(attachmentManager),
      parameters: worldParameters
    });
    this.beforeHookDefinitions = this.getBeforeHookDefinitions();
    this.afterHookDefinitions = this.getAfterHookDefinitions();
    this.testStepIndex = 0;
    this.maxTestStepIndex = this.beforeHookDefinitions.length + this.testCase.pickle.steps.length + this.afterHookDefinitions.length - 1;
    this.result = {
      duration: 0,
      status: this.skip ? _status2.default.SKIPPED : _status2.default.PASSED
    };
    this.testCaseSourceLocation = {
      uri: this.testCase.uri,
      line: this.testCase.pickle.locations[0].line
    };
  }

  (0, _createClass3.default)(TestCaseRunner, [{
    key: 'emit',
    value: function emit(name, data) {
      var eventData = (0, _extends3.default)({}, data);
      if (_lodash2.default.startsWith(name, 'test-case')) {
        eventData.sourceLocation = this.testCaseSourceLocation;
      } else {
        eventData.testCase = { sourceLocation: this.testCaseSourceLocation };
      }
      this.eventBroadcaster.emit(name, eventData);
    }
  }, {
    key: 'emitPrepared',
    value: function emitPrepared() {
      var _this2 = this;

      var steps = [];
      this.beforeHookDefinitions.forEach(function (definition) {
        var actionLocation = { uri: definition.uri, line: definition.line };
        steps.push({ actionLocation: actionLocation });
      });
      this.testCase.pickle.steps.forEach(function (step) {
        var actionLocations = _this2.getStepDefinitions(step).map(function (definition) {
          return {
            uri: definition.uri,
            line: definition.line
          };
        });
        var sourceLocation = {
          uri: _this2.testCase.uri,
          line: _lodash2.default.last(step.locations).line
        };
        var data = { sourceLocation: sourceLocation };
        if (actionLocations.length === 1) {
          data.actionLocation = actionLocations[0];
        }
        steps.push(data);
      });
      this.afterHookDefinitions.forEach(function (definition) {
        var actionLocation = { uri: definition.uri, line: definition.line };
        steps.push({ actionLocation: actionLocation });
      });
      this.emit('test-case-prepared', { steps: steps });
    }
  }, {
    key: 'getAfterHookDefinitions',
    value: function getAfterHookDefinitions() {
      var _this3 = this;

      return this.supportCodeLibrary.afterTestCaseHookDefinitions.filter(function (hookDefinition) {
        return hookDefinition.appliesToTestCase(_this3.testCase);
      });
    }
  }, {
    key: 'getBeforeHookDefinitions',
    value: function getBeforeHookDefinitions() {
      var _this4 = this;

      return this.supportCodeLibrary.beforeTestCaseHookDefinitions.filter(function (hookDefinition) {
        return hookDefinition.appliesToTestCase(_this4.testCase);
      });
    }
  }, {
    key: 'getStepDefinitions',
    value: function getStepDefinitions(step) {
      var _this5 = this;

      return this.supportCodeLibrary.stepDefinitions.filter(function (stepDefinition) {
        return stepDefinition.matchesStepName({
          stepName: step.text,
          parameterTypeRegistry: _this5.supportCodeLibrary.parameterTypeRegistry
        });
      });
    }
  }, {
    key: 'invokeStep',
    value: function invokeStep(step, stepDefinition, hookParameter) {
      return _step_runner2.default.run({
        defaultTimeout: this.supportCodeLibrary.defaultTimeout,
        hookParameter: hookParameter,
        parameterTypeRegistry: this.supportCodeLibrary.parameterTypeRegistry,
        step: step,
        stepDefinition: stepDefinition,
        world: this.world
      });
    }
  }, {
    key: 'isSkippingSteps',
    value: function isSkippingSteps() {
      return this.result.status !== _status2.default.PASSED;
    }
  }, {
    key: 'shouldSkipHook',
    value: function shouldSkipHook(isBeforeHook) {
      return this.skip || this.isSkippingSteps() && isBeforeHook;
    }
  }, {
    key: 'shouldUpdateStatus',
    value: function shouldUpdateStatus(testStepResult) {
      switch (testStepResult.status) {
        case _status2.default.FAILED:
        case _status2.default.AMBIGUOUS:
          return this.result.status !== _status2.default.FAILED || this.result.status !== _status2.default.AMBIGUOUS;
        default:
          return this.result.status === _status2.default.PASSED || this.result.status === _status2.default.SKIPPED;
      }
    }
  }, {
    key: 'aroundTestStep',
    value: function () {
      var _ref3 = (0, _bluebird.coroutine)(function* (runStepFn) {
        this.emit('test-step-started', { index: this.testStepIndex });
        var testStepResult = yield runStepFn();
        if (testStepResult.duration) {
          this.result.duration += testStepResult.duration;
        }
        if (this.shouldUpdateStatus(testStepResult)) {
          this.result.status = testStepResult.status;
        }
        if (testStepResult.exception) {
          this.result.exception = testStepResult.exception;
        }
        this.emit('test-step-finished', {
          index: this.testStepIndex,
          result: testStepResult
        });
        this.testStepIndex += 1;
      });

      function aroundTestStep(_x) {
        return _ref3.apply(this, arguments);
      }

      return aroundTestStep;
    }()
  }, {
    key: 'run',
    value: function () {
      var _ref4 = (0, _bluebird.coroutine)(function* () {
        this.emitPrepared();
        this.emit('test-case-started', {});
        yield this.runHooks(this.beforeHookDefinitions, {
          sourceLocation: this.testCaseSourceLocation,
          pickle: this.testCase.pickle
        }, true);
        yield this.runSteps();
        yield this.runHooks(this.afterHookDefinitions, {
          sourceLocation: this.testCaseSourceLocation,
          pickle: this.testCase.pickle,
          result: this.result
        }, false);
        this.emit('test-case-finished', { result: this.result });
        return this.result;
      });

      function run() {
        return _ref4.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: 'runHook',
    value: function () {
      var _ref5 = (0, _bluebird.coroutine)(function* (hookDefinition, hookParameter, isBeforeHook) {
        if (this.shouldSkipHook(isBeforeHook)) {
          return { status: _status2.default.SKIPPED };
        }
        return this.invokeStep(null, hookDefinition, hookParameter);
      });

      function runHook(_x2, _x3, _x4) {
        return _ref5.apply(this, arguments);
      }

      return runHook;
    }()
  }, {
    key: 'runHooks',
    value: function () {
      var _ref6 = (0, _bluebird.coroutine)(function* (hookDefinitions, hookParameter, isBeforeHook) {
        var _this6 = this;

        yield _bluebird2.default.each(hookDefinitions, function () {
          var _ref7 = (0, _bluebird.coroutine)(function* (hookDefinition) {
            yield _this6.aroundTestStep(function () {
              return _this6.runHook(hookDefinition, hookParameter, isBeforeHook);
            });
          });

          return function (_x8) {
            return _ref7.apply(this, arguments);
          };
        }());
      });

      function runHooks(_x5, _x6, _x7) {
        return _ref6.apply(this, arguments);
      }

      return runHooks;
    }()
  }, {
    key: 'runStep',
    value: function () {
      var _ref8 = (0, _bluebird.coroutine)(function* (step) {
        var stepDefinitions = this.getStepDefinitions(step);
        if (stepDefinitions.length === 0) {
          return { status: _status2.default.UNDEFINED };
        } else if (stepDefinitions.length > 1) {
          return {
            exception: (0, _helpers.getAmbiguousStepException)(stepDefinitions),
            status: _status2.default.AMBIGUOUS
          };
        } else if (this.isSkippingSteps()) {
          return { status: _status2.default.SKIPPED };
        }
        return this.invokeStep(step, stepDefinitions[0]);
      });

      function runStep(_x9) {
        return _ref8.apply(this, arguments);
      }

      return runStep;
    }()
  }, {
    key: 'runSteps',
    value: function () {
      var _ref9 = (0, _bluebird.coroutine)(function* () {
        var _this7 = this;

        yield _bluebird2.default.each(this.testCase.pickle.steps, function () {
          var _ref10 = (0, _bluebird.coroutine)(function* (step) {
            yield _this7.aroundTestStep(function () {
              return _this7.runStep(step);
            });
          });

          return function (_x10) {
            return _ref10.apply(this, arguments);
          };
        }());
      });

      function runSteps() {
        return _ref9.apply(this, arguments);
      }

      return runSteps;
    }()
  }]);
  return TestCaseRunner;
}();

exports.default = TestCaseRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL3Rlc3RfY2FzZV9ydW5uZXIuanMiXSwibmFtZXMiOlsiVGVzdENhc2VSdW5uZXIiLCJldmVudEJyb2FkY2FzdGVyIiwic2tpcCIsInRlc3RDYXNlIiwic3VwcG9ydENvZGVMaWJyYXJ5Iiwid29ybGRQYXJhbWV0ZXJzIiwiYXR0YWNobWVudE1hbmFnZXIiLCJkYXRhIiwibWVkaWEiLCJ0ZXN0U3RlcEluZGV4IiwibWF4VGVzdFN0ZXBJbmRleCIsIkVycm9yIiwiZW1pdCIsImluZGV4Iiwid29ybGQiLCJXb3JsZCIsImF0dGFjaCIsImNyZWF0ZSIsInBhcmFtZXRlcnMiLCJiZWZvcmVIb29rRGVmaW5pdGlvbnMiLCJnZXRCZWZvcmVIb29rRGVmaW5pdGlvbnMiLCJhZnRlckhvb2tEZWZpbml0aW9ucyIsImdldEFmdGVySG9va0RlZmluaXRpb25zIiwibGVuZ3RoIiwicGlja2xlIiwic3RlcHMiLCJyZXN1bHQiLCJkdXJhdGlvbiIsInN0YXR1cyIsIlNLSVBQRUQiLCJQQVNTRUQiLCJ0ZXN0Q2FzZVNvdXJjZUxvY2F0aW9uIiwidXJpIiwibGluZSIsImxvY2F0aW9ucyIsIm5hbWUiLCJldmVudERhdGEiLCJzdGFydHNXaXRoIiwic291cmNlTG9jYXRpb24iLCJmb3JFYWNoIiwiYWN0aW9uTG9jYXRpb24iLCJkZWZpbml0aW9uIiwicHVzaCIsImFjdGlvbkxvY2F0aW9ucyIsImdldFN0ZXBEZWZpbml0aW9ucyIsInN0ZXAiLCJtYXAiLCJsYXN0IiwiYWZ0ZXJUZXN0Q2FzZUhvb2tEZWZpbml0aW9ucyIsImZpbHRlciIsImhvb2tEZWZpbml0aW9uIiwiYXBwbGllc1RvVGVzdENhc2UiLCJiZWZvcmVUZXN0Q2FzZUhvb2tEZWZpbml0aW9ucyIsInN0ZXBEZWZpbml0aW9ucyIsInN0ZXBEZWZpbml0aW9uIiwibWF0Y2hlc1N0ZXBOYW1lIiwic3RlcE5hbWUiLCJ0ZXh0IiwicGFyYW1ldGVyVHlwZVJlZ2lzdHJ5IiwiaG9va1BhcmFtZXRlciIsInJ1biIsImRlZmF1bHRUaW1lb3V0IiwiaXNCZWZvcmVIb29rIiwiaXNTa2lwcGluZ1N0ZXBzIiwidGVzdFN0ZXBSZXN1bHQiLCJGQUlMRUQiLCJBTUJJR1VPVVMiLCJydW5TdGVwRm4iLCJzaG91bGRVcGRhdGVTdGF0dXMiLCJleGNlcHRpb24iLCJlbWl0UHJlcGFyZWQiLCJydW5Ib29rcyIsInJ1blN0ZXBzIiwic2hvdWxkU2tpcEhvb2siLCJpbnZva2VTdGVwIiwiaG9va0RlZmluaXRpb25zIiwiZWFjaCIsImFyb3VuZFRlc3RTdGVwIiwicnVuSG9vayIsIlVOREVGSU5FRCIsInJ1blN0ZXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7Ozs7O0lBRXFCQSxjO0FBQ25CLGdDQU1HO0FBQUE7O0FBQUEsUUFMREMsZ0JBS0MsUUFMREEsZ0JBS0M7QUFBQSxRQUpEQyxJQUlDLFFBSkRBLElBSUM7QUFBQSxRQUhEQyxRQUdDLFFBSERBLFFBR0M7QUFBQSxRQUZEQyxrQkFFQyxRQUZEQSxrQkFFQztBQUFBLFFBRERDLGVBQ0MsUUFEREEsZUFDQztBQUFBOztBQUNELFFBQU1DLG9CQUFvQixpQ0FBc0IsaUJBQXFCO0FBQUEsVUFBbEJDLElBQWtCLFNBQWxCQSxJQUFrQjtBQUFBLFVBQVpDLEtBQVksU0FBWkEsS0FBWTs7QUFDbkUsVUFBSSxNQUFLQyxhQUFMLEdBQXFCLE1BQUtDLGdCQUE5QixFQUFnRDtBQUM5QyxjQUFNLElBQUlDLEtBQUosQ0FDSixrSEFESSxDQUFOO0FBR0Q7QUFDRCxZQUFLQyxJQUFMLENBQVUsc0JBQVYsRUFBa0M7QUFDaENDLGVBQU8sTUFBS0osYUFEb0I7QUFFaENGLGtCQUZnQztBQUdoQ0M7QUFIZ0MsT0FBbEM7QUFLRCxLQVh5QixDQUExQjtBQVlBLFNBQUtQLGdCQUFMLEdBQXdCQSxnQkFBeEI7QUFDQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxRQUFMLEdBQWdC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OztzREFFYWpCLEksRUFBTTtBQUNsQixZQUFNUSxrQkFBa0IsS0FBS1Qsa0JBQUwsQ0FBd0JDLElBQXhCLENBQXhCO0FBQ0EsWUFBSVEsZ0JBQWdCOUIsTUFBaEIsS0FBMkIsQ0FBL0IsRUFBa0M7QUFDaEMsaUJBQU8sRUFBRUssUUFBUSxpQkFBT21ELFNBQWpCLEVBQVA7QUFDRCxTQUZELE1BRU8sSUFBSTFCLGdCQUFnQjlCLE1BQWhCLEdBQXlCLENBQTdCLEVBQWdDO0FBQ3JDLGlCQUFPO0FBQ0w4Qyx1QkFBVyx3Q0FBMEJoQixlQUExQixDQUROO0FBRUx6QixvQkFBUSxpQkFBT3NDO0FBRlYsV0FBUDtBQUlELFNBTE0sTUFLQSxJQUFJLEtBQUtILGVBQUwsRUFBSixFQUE0QjtBQUNqQyxpQkFBTyxFQUFFbkMsUUFBUSxpQkFBT0MsT0FBakIsRUFBUDtBQUNEO0FBQ0QsZUFBTyxLQUFLNkMsVUFBTCxDQUFnQjdCLElBQWhCLEVBQXNCUSxnQkFBZ0IsQ0FBaEIsQ0FBdEIsQ0FBUDtBQUNELE87Ozs7Ozs7Ozs7O3dEQUVnQjtBQUFBOztBQUNmLGNBQU0sbUJBQVF1QixJQUFSLENBQWEsS0FBS3pFLFFBQUwsQ0FBY3FCLE1BQWQsQ0FBcUJDLEtBQWxDO0FBQUEsZ0RBQXlDLFdBQU1vQixJQUFOLEVBQWM7QUFDM0Qsa0JBQU0sT0FBS2dDLGNBQUwsQ0FBb0I7QUFBQSxxQkFBTSxPQUFLRyxPQUFMLENBQWFuQyxJQUFiLENBQU47QUFBQSxhQUFwQixDQUFOO0FBQ0QsV0FGSzs7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFOO0FBR0QsTzs7Ozs7Ozs7Ozs7O2tCQTFOa0I3QyxjIiwiZmlsZSI6InRlc3RfY2FzZV9ydW5uZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgeyBnZXRBbWJpZ3VvdXNTdGVwRXhjZXB0aW9uIH0gZnJvbSAnLi9oZWxwZXJzJ1xuaW1wb3J0IEF0dGFjaG1lbnRNYW5hZ2VyIGZyb20gJy4vYXR0YWNobWVudF9tYW5hZ2VyJ1xuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnXG5pbXBvcnQgU3RhdHVzIGZyb20gJy4uL3N0YXR1cydcbmltcG9ydCBTdGVwUnVubmVyIGZyb20gJy4vc3RlcF9ydW5uZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlc3RDYXNlUnVubmVyIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGV2ZW50QnJvYWRjYXN0ZXIsXG4gICAgc2tpcCxcbiAgICB0ZXN0Q2FzZSxcbiAgICBzdXBwb3J0Q29kZUxpYnJhcnksXG4gICAgd29ybGRQYXJhbWV0ZXJzLFxuICB9KSB7XG4gICAgY29uc3QgYXR0YWNobWVudE1hbmFnZXIgPSBuZXcgQXR0YWNobWVudE1hbmFnZXIoKHsgZGF0YSwgbWVkaWEgfSkgPT4ge1xuICAgICAgaWYgKHRoaXMudGVzdFN0ZXBJbmRleCA+IHRoaXMubWF4VGVzdFN0ZXBJbmRleCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0Nhbm5vdCBhdHRhY2ggYWZ0ZXIgYWxsIHN0ZXBzL2hvb2tzIGhhdmUgZmluaXNoZWQgcnVubmluZy4gRW5zdXJlIHlvdXIgc3RlcC9ob29rIHdhaXRzIGZvciB0aGUgYXR0YWNoIHRvIGZpbmlzaC4nXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHRoaXMuZW1pdCgndGVzdC1zdGVwLWF0dGFjaG1lbnQnLCB7XG4gICAgICAgIGluZGV4OiB0aGlzLnRlc3RTdGVwSW5kZXgsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIG1lZGlhLFxuICAgICAgfSlcbiAgICB9KVxuICAgIHRoaXMuZXZlbnRCcm9hZGNhc3RlciA9IGV2ZW50QnJvYWRjYXN0ZXJcbiAgICB0aGlzLnNraXAgPSBza2lwXG4gICAgdGhpcy50ZXN0Q2FzZSA9IHRlc3RDYXNlXG4gICAgdGhpcy5zdXBwb3J0Q29kZUxpYnJhcnkgPSBzdXBwb3J0Q29kZUxpYnJhcnlcbiAgICB0aGlzLndvcmxkID0gbmV3IHN1cHBvcnRDb2RlTGlicmFyeS5Xb3JsZCh7XG4gICAgICBhdHRhY2g6IDo6YXR0YWNobWVudE1hbmFnZXIuY3JlYXRlLFxuICAgICAgcGFyYW1ldGVyczogd29ybGRQYXJhbWV0ZXJzLFxuICAgIH0pXG4gICAgdGhpcy5iZWZvcmVIb29rRGVmaW5pdGlvbnMgPSB0aGlzLmdldEJlZm9yZUhvb2tEZWZpbml0aW9ucygpXG4gICAgdGhpcy5hZnRlckhvb2tEZWZpbml0aW9ucyA9IHRoaXMuZ2V0QWZ0ZXJIb29rRGVmaW5pdGlvbnMoKVxuICAgIHRoaXMudGVzdFN0ZXBJbmRleCA9IDBcbiAgICB0aGlzLm1heFRlc3RTdGVwSW5kZXggPVxuICAgICAgdGhpcy5iZWZvcmVIb29rRGVmaW5pdGlvbnMubGVuZ3RoICtcbiAgICAgIHRoaXMudGVzdENhc2UucGlja2xlLnN0ZXBzLmxlbmd0aCArXG4gICAgICB0aGlzLmFmdGVySG9va0RlZmluaXRpb25zLmxlbmd0aCAtXG4gICAgICAxXG4gICAgdGhpcy5yZXN1bHQgPSB7XG4gICAgICBkdXJhdGlvbjogMCxcbiAgICAgIHN0YXR1czogdGhpcy5za2lwID8gU3RhdHVzLlNLSVBQRUQgOiBTdGF0dXMuUEFTU0VELFxuICAgIH1cbiAgICB0aGlzLnRlc3RDYXNlU291cmNlTG9jYXRpb24gPSB7XG4gICAgICB1cmk6IHRoaXMudGVzdENhc2UudXJpLFxuICAgICAgbGluZTogdGhpcy50ZXN0Q2FzZS5waWNrbGUubG9jYXRpb25zWzBdLmxpbmUsXG4gICAgfVxuICB9XG5cbiAgZW1pdChuYW1lLCBkYXRhKSB7XG4gICAgY29uc3QgZXZlbnREYXRhID0geyAuLi5kYXRhIH1cbiAgICBpZiAoXy5zdGFydHNXaXRoKG5hbWUsICd0ZXN0LWNhc2UnKSkge1xuICAgICAgZXZlbnREYXRhLnNvdXJjZUxvY2F0aW9uID0gdGhpcy50ZXN0Q2FzZVNvdXJjZUxvY2F0aW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50RGF0YS50ZXN0Q2FzZSA9IHsgc291cmNlTG9jYXRpb246IHRoaXMudGVzdENhc2VTb3VyY2VMb2NhdGlvbiB9XG4gICAgfVxuICAgIHRoaXMuZXZlbnRCcm9hZGNhc3Rlci5lbWl0KG5hbWUsIGV2ZW50RGF0YSlcbiAgfVxuXG4gIGVtaXRQcmVwYXJlZCgpIHtcbiAgICBjb25zdCBzdGVwcyA9IFtdXG4gICAgdGhpcy5iZWZvcmVIb29rRGVmaW5pdGlvbnMuZm9yRWFjaChkZWZpbml0aW9uID0+IHtcbiAgICAgIGNvbnN0IGFjdGlvbkxvY2F0aW9uID0geyB1cmk6IGRlZmluaXRpb24udXJpLCBsaW5lOiBkZWZpbml0aW9uLmxpbmUgfVxuICAgICAgc3RlcHMucHVzaCh7IGFjdGlvbkxvY2F0aW9uIH0pXG4gICAgfSlcbiAgICB0aGlzLnRlc3RDYXNlLnBpY2tsZS5zdGVwcy5mb3JFYWNoKHN0ZXAgPT4ge1xuICAgICAgY29uc3QgYWN0aW9uTG9jYXRpb25zID0gdGhpcy5nZXRTdGVwRGVmaW5pdGlvbnMoc3RlcCkubWFwKGRlZmluaXRpb24gPT4gKHtcbiAgICAgICAgdXJpOiBkZWZpbml0aW9uLnVyaSxcbiAgICAgICAgbGluZTogZGVmaW5pdGlvbi5saW5lLFxuICAgICAgfSkpXG4gICAgICBjb25zdCBzb3VyY2VMb2NhdGlvbiA9IHtcbiAgICAgICAgdXJpOiB0aGlzLnRlc3RDYXNlLnVyaSxcbiAgICAgICAgbGluZTogXy5sYXN0KHN0ZXAubG9jYXRpb25zKS5saW5lLFxuICAgICAgfVxuICAgICAgY29uc3QgZGF0YSA9IHsgc291cmNlTG9jYXRpb24gfVxuICAgICAgaWYgKGFjdGlvbkxvY2F0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZGF0YS5hY3Rpb25Mb2NhdGlvbiA9IGFjdGlvbkxvY2F0aW9uc1swXVxuICAgICAgfVxuICAgICAgc3RlcHMucHVzaChkYXRhKVxuICAgIH0pXG4gICAgdGhpcy5hZnRlckhvb2tEZWZpbml0aW9ucy5mb3JFYWNoKGRlZmluaXRpb24gPT4ge1xuICAgICAgY29uc3QgYWN0aW9uTG9jYXRpb24gPSB7IHVyaTogZGVmaW5pdGlvbi51cmksIGxpbmU6IGRlZmluaXRpb24ubGluZSB9XG4gICAgICBzdGVwcy5wdXNoKHsgYWN0aW9uTG9jYXRpb24gfSlcbiAgICB9KVxuICAgIHRoaXMuZW1pdCgndGVzdC1jYXNlLXByZXBhcmVkJywgeyBzdGVwcyB9KVxuICB9XG5cbiAgZ2V0QWZ0ZXJIb29rRGVmaW5pdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VwcG9ydENvZGVMaWJyYXJ5LmFmdGVyVGVzdENhc2VIb29rRGVmaW5pdGlvbnMuZmlsdGVyKFxuICAgICAgaG9va0RlZmluaXRpb24gPT4gaG9va0RlZmluaXRpb24uYXBwbGllc1RvVGVzdENhc2UodGhpcy50ZXN0Q2FzZSlcbiAgICApXG4gIH1cblxuICBnZXRCZWZvcmVIb29rRGVmaW5pdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VwcG9ydENvZGVMaWJyYXJ5LmJlZm9yZVRlc3RDYXNlSG9va0RlZmluaXRpb25zLmZpbHRlcihcbiAgICAgIGhvb2tEZWZpbml0aW9uID0+IGhvb2tEZWZpbml0aW9uLmFwcGxpZXNUb1Rlc3RDYXNlKHRoaXMudGVzdENhc2UpXG4gICAgKVxuICB9XG5cbiAgZ2V0U3RlcERlZmluaXRpb25zKHN0ZXApIHtcbiAgICByZXR1cm4gdGhpcy5zdXBwb3J0Q29kZUxpYnJhcnkuc3RlcERlZmluaXRpb25zLmZpbHRlcihzdGVwRGVmaW5pdGlvbiA9PlxuICAgICAgc3RlcERlZmluaXRpb24ubWF0Y2hlc1N0ZXBOYW1lKHtcbiAgICAgICAgc3RlcE5hbWU6IHN0ZXAudGV4dCxcbiAgICAgICAgcGFyYW1ldGVyVHlwZVJlZ2lzdHJ5OiB0aGlzLnN1cHBvcnRDb2RlTGlicmFyeS5wYXJhbWV0ZXJUeXBlUmVnaXN0cnksXG4gICAgICB9KVxuICAgIClcbiAgfVxuXG4gIGludm9rZVN0ZXAoc3RlcCwgc3RlcERlZmluaXRpb24sIGhvb2tQYXJhbWV0ZXIpIHtcbiAgICByZXR1cm4gU3RlcFJ1bm5lci5ydW4oe1xuICAgICAgZGVmYXVsdFRpbWVvdXQ6IHRoaXMuc3VwcG9ydENvZGVMaWJyYXJ5LmRlZmF1bHRUaW1lb3V0LFxuICAgICAgaG9va1BhcmFtZXRlcixcbiAgICAgIHBhcmFtZXRlclR5cGVSZWdpc3RyeTogdGhpcy5zdXBwb3J0Q29kZUxpYnJhcnkucGFyYW1ldGVyVHlwZVJlZ2lzdHJ5LFxuICAgICAgc3RlcCxcbiAgICAgIHN0ZXBEZWZpbml0aW9uLFxuICAgICAgd29ybGQ6IHRoaXMud29ybGQsXG4gICAgfSlcbiAgfVxuXG4gIGlzU2tpcHBpbmdTdGVwcygpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN1bHQuc3RhdHVzICE9PSBTdGF0dXMuUEFTU0VEXG4gIH1cblxuICBzaG91bGRTa2lwSG9vayhpc0JlZm9yZUhvb2spIHtcbiAgICByZXR1cm4gdGhpcy5za2lwIHx8ICh0aGlzLmlzU2tpcHBpbmdTdGVwcygpICYmIGlzQmVmb3JlSG9vaylcbiAgfVxuXG4gIHNob3VsZFVwZGF0ZVN0YXR1cyh0ZXN0U3RlcFJlc3VsdCkge1xuICAgIHN3aXRjaCAodGVzdFN0ZXBSZXN1bHQuc3RhdHVzKSB7XG4gICAgICBjYXNlIFN0YXR1cy5GQUlMRUQ6XG4gICAgICBjYXNlIFN0YXR1cy5BTUJJR1VPVVM6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgdGhpcy5yZXN1bHQuc3RhdHVzICE9PSBTdGF0dXMuRkFJTEVEIHx8XG4gICAgICAgICAgdGhpcy5yZXN1bHQuc3RhdHVzICE9PSBTdGF0dXMuQU1CSUdVT1VTXG4gICAgICAgIClcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgdGhpcy5yZXN1bHQuc3RhdHVzID09PSBTdGF0dXMuUEFTU0VEIHx8XG4gICAgICAgICAgdGhpcy5yZXN1bHQuc3RhdHVzID09PSBTdGF0dXMuU0tJUFBFRFxuICAgICAgICApXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYXJvdW5kVGVzdFN0ZXAocnVuU3RlcEZuKSB7XG4gICAgdGhpcy5lbWl0KCd0ZXN0LXN0ZXAtc3RhcnRlZCcsIHsgaW5kZXg6IHRoaXMudGVzdFN0ZXBJbmRleCB9KVxuICAgIGNvbnN0IHRlc3RTdGVwUmVzdWx0ID0gYXdhaXQgcnVuU3RlcEZuKClcbiAgICBpZiAodGVzdFN0ZXBSZXN1bHQuZHVyYXRpb24pIHtcbiAgICAgIHRoaXMucmVzdWx0LmR1cmF0aW9uICs9IHRlc3RTdGVwUmVzdWx0LmR1cmF0aW9uXG4gICAgfVxuICAgIGlmICh0aGlzLnNob3VsZFVwZGF0ZVN0YXR1cyh0ZXN0U3RlcFJlc3VsdCkpIHtcbiAgICAgIHRoaXMucmVzdWx0LnN0YXR1cyA9IHRlc3RTdGVwUmVzdWx0LnN0YXR1c1xuICAgIH1cbiAgICBpZiAodGVzdFN0ZXBSZXN1bHQuZXhjZXB0aW9uKSB7XG4gICAgICB0aGlzLnJlc3VsdC5leGNlcHRpb24gPSB0ZXN0U3RlcFJlc3VsdC5leGNlcHRpb25cbiAgICB9XG4gICAgdGhpcy5lbWl0KCd0ZXN0LXN0ZXAtZmluaXNoZWQnLCB7XG4gICAgICBpbmRleDogdGhpcy50ZXN0U3RlcEluZGV4LFxuICAgICAgcmVzdWx0OiB0ZXN0U3RlcFJlc3VsdCxcbiAgICB9KVxuICAgIHRoaXMudGVzdFN0ZXBJbmRleCArPSAxXG4gIH1cblxuICBhc3luYyBydW4oKSB7XG4gICAgdGhpcy5lbWl0UHJlcGFyZWQoKVxuICAgIHRoaXMuZW1pdCgndGVzdC1jYXNlLXN0YXJ0ZWQnLCB7fSlcbiAgICBhd2FpdCB0aGlzLnJ1bkhvb2tzKFxuICAgICAgdGhpcy5iZWZvcmVIb29rRGVmaW5pdGlvbnMsXG4gICAgICB7XG4gICAgICAgIHNvdXJjZUxvY2F0aW9uOiB0aGlzLnRlc3RDYXNlU291cmNlTG9jYXRpb24sXG4gICAgICAgIHBpY2tsZTogdGhpcy50ZXN0Q2FzZS5waWNrbGUsXG4gICAgICB9LFxuICAgICAgdHJ1ZVxuICAgIClcbiAgICBhd2FpdCB0aGlzLnJ1blN0ZXBzKClcbiAgICBhd2FpdCB0aGlzLnJ1bkhvb2tzKFxuICAgICAgdGhpcy5hZnRlckhvb2tEZWZpbml0aW9ucyxcbiAgICAgIHtcbiAgICAgICAgc291cmNlTG9jYXRpb246IHRoaXMudGVzdENhc2VTb3VyY2VMb2NhdGlvbixcbiAgICAgICAgcGlja2xlOiB0aGlzLnRlc3RDYXNlLnBpY2tsZSxcbiAgICAgICAgcmVzdWx0OiB0aGlzLnJlc3VsdCxcbiAgICAgIH0sXG4gICAgICBmYWxzZVxuICAgIClcbiAgICB0aGlzLmVtaXQoJ3Rlc3QtY2FzZS1maW5pc2hlZCcsIHsgcmVzdWx0OiB0aGlzLnJlc3VsdCB9KVxuICAgIHJldHVybiB0aGlzLnJlc3VsdFxuICB9XG5cbiAgYXN5bmMgcnVuSG9vayhob29rRGVmaW5pdGlvbiwgaG9va1BhcmFtZXRlciwgaXNCZWZvcmVIb29rKSB7XG4gICAgaWYgKHRoaXMuc2hvdWxkU2tpcEhvb2soaXNCZWZvcmVIb29rKSkge1xuICAgICAgcmV0dXJuIHsgc3RhdHVzOiBTdGF0dXMuU0tJUFBFRCB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmludm9rZVN0ZXAobnVsbCwgaG9va0RlZmluaXRpb24sIGhvb2tQYXJhbWV0ZXIpXG4gIH1cblxuICBhc3luYyBydW5Ib29rcyhob29rRGVmaW5pdGlvbnMsIGhvb2tQYXJhbWV0ZXIsIGlzQmVmb3JlSG9vaykge1xuICAgIGF3YWl0IFByb21pc2UuZWFjaChob29rRGVmaW5pdGlvbnMsIGFzeW5jIGhvb2tEZWZpbml0aW9uID0+IHtcbiAgICAgIGF3YWl0IHRoaXMuYXJvdW5kVGVzdFN0ZXAoKCkgPT5cbiAgICAgICAgdGhpcy5ydW5Ib29rKGhvb2tEZWZpbml0aW9uLCBob29rUGFyYW1ldGVyLCBpc0JlZm9yZUhvb2spXG4gICAgICApXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIHJ1blN0ZXAoc3RlcCkge1xuICAgIGNvbnN0IHN0ZXBEZWZpbml0aW9ucyA9IHRoaXMuZ2V0U3RlcERlZmluaXRpb25zKHN0ZXApXG4gICAgaWYgKHN0ZXBEZWZpbml0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7IHN0YXR1czogU3RhdHVzLlVOREVGSU5FRCB9XG4gICAgfSBlbHNlIGlmIChzdGVwRGVmaW5pdGlvbnMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhjZXB0aW9uOiBnZXRBbWJpZ3VvdXNTdGVwRXhjZXB0aW9uKHN0ZXBEZWZpbml0aW9ucyksXG4gICAgICAgIHN0YXR1czogU3RhdHVzLkFNQklHVU9VUyxcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNTa2lwcGluZ1N0ZXBzKCkpIHtcbiAgICAgIHJldHVybiB7IHN0YXR1czogU3RhdHVzLlNLSVBQRUQgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5pbnZva2VTdGVwKHN0ZXAsIHN0ZXBEZWZpbml0aW9uc1swXSlcbiAgfVxuXG4gIGFzeW5jIHJ1blN0ZXBzKCkge1xuICAgIGF3YWl0IFByb21pc2UuZWFjaCh0aGlzLnRlc3RDYXNlLnBpY2tsZS5zdGVwcywgYXN5bmMgc3RlcCA9PiB7XG4gICAgICBhd2FpdCB0aGlzLmFyb3VuZFRlc3RTdGVwKCgpID0+IHRoaXMucnVuU3RlcChzdGVwKSlcbiAgICB9KVxuICB9XG59XG4iXX0=